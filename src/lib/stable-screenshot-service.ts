import { EmailMessage } from '@/types';\n\n// Simplified, stable image handling that avoids DOM conflicts\nexport function createStableHtmlForScreenshot(htmlContent: string): string {\n  // Create a temporary div to parse the HTML\n  const tempDiv = document.createElement('div');\n  tempDiv.innerHTML = htmlContent;\n  \n  // Find all images and handle them synchronously\n  const images = tempDiv.querySelectorAll('img');\n  console.log(`Processing ${images.length} images for stable screenshot`);\n  \n  images.forEach((img, index) => {\n    const src = img.getAttribute('src') || img.src || '';\n    \n    // Replace ALL external images with placeholders to avoid CORS/loading issues\n    if (src.startsWith('http') || src.startsWith('cid:') || src === '' || !src) {\n      console.log(`Replacing image ${index + 1}: ${src}`);\n      \n      // Create a simple, stable placeholder\n      const placeholder = document.createElement('span');\n      placeholder.style.cssText = `\n        display: inline-block;\n        width: 60px;\n        height: 20px;\n        background: #f1f3f4;\n        border: 1px solid #dadce0;\n        text-align: center;\n        font-size: 10px;\n        line-height: 18px;\n        color: #5f6368;\n        font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n        margin: 2px;\n        vertical-align: middle;\n      `;\n      placeholder.textContent = '[img]';\n      \n      // Safe replacement\n      if (img.parentNode) {\n        img.parentNode.replaceChild(placeholder, img);\n      }\n    } else {\n      // For data URLs and safe images, optimize for screenshot\n      img.style.maxWidth = '100%';\n      img.style.height = 'auto';\n      img.removeAttribute('crossorigin');\n    }\n  });\n  \n  // Clean up problematic CSS that causes parsing errors\n  const styles = tempDiv.querySelectorAll('style');\n  styles.forEach(style => {\n    // Remove or simplify complex CSS that causes html2canvas issues\n    const cssText = style.textContent || '';\n    if (cssText.includes('@import') || cssText.includes('@font-face') || cssText.includes('position:fixed')) {\n      style.remove();\n    }\n  });\n  \n  // Remove script tags that can interfere\n  const scripts = tempDiv.querySelectorAll('script');\n  scripts.forEach(script => script.remove());\n  \n  // Add stable styling to prevent layout issues\n  const stableStyle = document.createElement('style');\n  stableStyle.textContent = `\n    * {\n      position: static !important;\n      transform: none !important;\n      animation: none !important;\n      transition: none !important;\n    }\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      line-height: 1.4;\n      margin: 20px;\n      background: white;\n    }\n    img {\n      max-width: 100%;\n      height: auto;\n    }\n    table {\n      border-collapse: collapse;\n      max-width: 100%;\n    }\n  `;\n  tempDiv.insertBefore(stableStyle, tempDiv.firstChild);\n  \n  console.log('Stable HTML processing complete');\n  return tempDiv.innerHTML;\n}\n\n// Simple screenshot service that avoids async conflicts\nexport class StableScreenshotService {\n  static async captureStableScreenshot(htmlContent: string, filename: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      // Create iframe\n      const iframe = document.createElement('iframe');\n      iframe.style.position = 'absolute';\n      iframe.style.left = '-9999px';\n      iframe.style.width = '1200px';\n      iframe.style.height = '800px';\n      iframe.style.border = 'none';\n      \n      document.body.appendChild(iframe);\n      \n      iframe.onload = async () => {\n        try {\n          const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;\n          if (!iframeDoc) {\n            throw new Error('Could not access iframe document');\n          }\n\n          // Process HTML synchronously to avoid conflicts\n          const stableHtml = createStableHtmlForScreenshot(htmlContent);\n          \n          // Write content\n          iframeDoc.open();\n          iframeDoc.write(`\n            <!DOCTYPE html>\n            <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            </head>\n            <body>\n              ${stableHtml}\n            </body>\n            </html>\n          `);\n          iframeDoc.close();\n\n          // Wait for layout to stabilize\n          await new Promise(resolve => setTimeout(resolve, 2000));\n\n          // Import and use html2canvas with minimal, stable settings\n          const html2canvas = (await import('html2canvas')).default;\n          \n          console.log('Taking stable screenshot...');\n          const canvas = await html2canvas(iframeDoc.body, {\n            allowTaint: false,\n            useCORS: false,\n            scale: 1.5,\n            width: 1200,\n            logging: false,\n            imageTimeout: 1000, // Short timeout\n            removeContainer: true,\n            backgroundColor: '#ffffff',\n            // Skip problematic elements\n            ignoreElements: (element) => {\n              return element.tagName === 'SCRIPT' || \n                     element.tagName === 'STYLE' ||\n                     element.tagName === 'LINK';\n            }\n          });\n\n          // Convert to base64\n          const screenshot = canvas.toDataURL('image/png');\n          \n          // Clean up\n          document.body.removeChild(iframe);\n          \n          resolve(screenshot);\n        } catch (error) {\n          document.body.removeChild(iframe);\n          reject(error);\n        }\n      };\n\n      iframe.onerror = () => {\n        document.body.removeChild(iframe);\n        reject(new Error('Failed to load iframe'));\n      };\n\n      iframe.src = 'about:blank';\n    });\n  }\n}\n